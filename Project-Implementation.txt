
==========================================================================
Install React js and Tailwind CSS and create the first template
==========================================================================
1:) Create a react project using the command
$ npm create vite@latest project


2:) Go to project folder 
$ cd project
$ npm i

3:) install tailwind css using vite make sure you are in project

$ npm install -D tailwindcss postcss autoprefixer
$ npx tailwindcss init -p

4:) Remove all content from tailwind.config.js and paste 

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

5:) Remove all content from index.css which is in src folder and paste

@tailwind base;
@tailwind components;
@tailwind utilities;

6:) Delete App.css from src, in public folder delete vite.svg, in assets which is in src delete react.svg

7:) Remove everything from App.jsx which is in src and write this code:

export default function App() {
  return (
    <div className="text-center text-xl text-blue-500">
      Welcome to Tailwind CSS!
    </div>
  );
}


8:) Now run the project

$ npm run dev
==========================================================================
Create pages and routes
==========================================================================
1:) Create a folder in src (pages) in which create 

      * About.jsx
      * SignIn.jsx
      * SignUp.jsx
      * Profile.jsx
      * Home.jsx

      in each file add rfc 

2:) Install a packege which enable us to create these routes in our project make sure your are in project folder 

$ npm i react-router-dom

3:) Now go to App.jsx and import it like this

import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import SignIn from './pages/SignIn';
import SignUp from './pages/SignUp';
import About from './pages/About';
import Profile from './pages/Profile';
export default function App()
{
  return (
    <BrowserRouter>
      <Routes>
        <Route path='/' element={ <Home />}/>
        <Route path='/sign-in' element={ <SignIn />}/>
        <Route path='/sign-up' element={ <SignUp />}/>
        <Route path='/about' element={ <About />}/>
        <Route path='/profile' element={ <Profile />}/>
      </Routes>
    </BrowserRouter>
  )
}

4:) Now run the project

$ npm run dev
==========================================================================
I create Header component and design it.
==========================================================================
1:) Create another folder in src (Components) in which create a file
    * Header.jsx

    add rfc 

2:) Add this header to all pages go to App.jsx and add 

</Header> 

and import at the top

import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import SignIn from './pages/SignIn';
import SignUp from './pages/SignUp';
import About from './pages/About';
import Profile from './pages/Profile';
import Header from './components/Header';

export default function App()
{
  return (
    <BrowserRouter>
      <Header /> 
      <Routes>
        <Route path='/' element={ <Home />}/>
        <Route path='/sign-in' element={ <SignIn />}/>
        <Route path='/sign-up' element={ <SignUp />}/>
        <Route path='/about' element={ <About />}/>
        <Route path='/profile' element={ <Profile />}/>
      </Routes>
    </BrowserRouter>
  )
}

3:) Now run the project to check it

$ npm run dev 

4:) Now design the header component and also install a packege for icons make sure you are in project folder

$ npm i react-icons

 go to Header.jsx and write this code: 

// for icons
import { FaSearch } from "react-icons/fa";
// link is going to bring us from one page to another page without refreshing the page
import { Link } from "react-router-dom";

export default function Header() {
  return (
    // Create Header component start
    <header className="bg-slate-200 shadow-md">
      <div className="flex justify-between items-center max-w-6xl mx-auto p-3">
        {/* logo of our project  start*/}
        <Link to="/">
          <h1 className="font-bold text-sm sm:text-xl flex flex-wrap">
            <span className="text-slate-500">Artic</span>
            <span className="text-slate-700">Estate</span>
          </h1>
        </Link>
        {/* logo of our project  end*/}

        {/* search bar of header component  start*/}
        <form className="bg-slate-100 p-3 rounded-lg flex items-center">
          <input
            type="text"
            name="search"
            id="search"
            placeholder="search.... "
            className="bg-transparent focus: outline-none w-24 sm:w-64"
          />
          <FaSearch className="text-slate-600" />
        </form>
        {/* search bar of header component  end*/}

        {/* Navbars start */}
        <ul className="flex gap-4 ">
          <Link to="">
            <li className="hidden sm:inline text-slate-700 hover:underline">
              Home
            </li>
          </Link>
          <Link to="/about">
            <li className="hidden sm:inline text-slate-700 hover:underline">
              About
            </li>
          </Link>
          <Link to="/sign-in">
            <li className="text-slate-700 hover:underline">Sign in</li>
          </Link>
        </ul>
        {/* Navbars end */}
      </div>
    </header>
    // Create Header component start
  );
}


==========================================================================
I create and run the server 
==========================================================================
1:) First i create a separet folder (api) in my FYP folder then we need to initialize a packege.json file but we need to do it in FYP folder and then i run a command

$ npm init -y

by using that command we create a package.json file in FYP folder.

2:) then install express in FYP folder using the command 

$ npm i express

by using this command we create Package-lock.json file and also create node_modules folder.

3:) then go to api folder and create index.js file and write the content 

import express from "express";

const app = express();

app.listen(3000, () => {
  console.log("Server is running on port 3000!!!!!!!!!!");
});

4:) Also add some module after "main": "index.js", in packege.json file

  "main": "index.js",

  we add this line 
  "type": "module",

5:) We do some changes but for each time we need to restart the server which is time consuming so we can fixed it by using nodemon. we can install by using the command make sure to install it in FYP HOME(root)

$ npm i nodemon

6:) After install nodemon add some packege for it in packege.json file which is in FYP HOME
Romeve this line from packege.json file
"test": "echo \"Error: no test specified\" && exit 1"

7:) Add these two lines

  "scripts": {
    "dev": "nodemon api/index.js",
    "start": "node api/index.js"
  },

8:) Run the server by using the command in FYP HOME folder

$ npm run dev

==========================================================================
Connect to database 
==========================================================================
1:) Set Up MySQL in XAMPP
* Start XAMPP:
  Open the XAMPP Control Panel.
  Start the Apache and MySQL modules.
* Access phpMyAdmin:
  Open your browser and go to http://localhost/phpmyadmin.
* Create a Database:
  In phpMyAdmin, create a database for your project (e.g., articestate).

2:) Now click on phpMyAdmin then click on User accounts then click on Add user account.

User name: articestate
Host name: localhost
Password: 12345
Re-type: 12345

* Global privileges  check all
* click on Go

3:) Install MySQL Driver for Node.js
Navigate to the FYP HOME folder in your terminal.
Run the following command to install the mysql2 package

$ npm i mysql2

4:) Set Up Database Connection in api/db.js
In your api folder, create a file called db.js and add the following code to connect to the database. This code does not require creating tables:

import mysql from 'mysql2';

// Create a connection pool without needing a specific table
const db = mysql.createPool({
  host: 'localhost',       // XAMPP MySQL server
  user: 'articestate',     // Username you created
  password: '12345',       // Password you created
  database: 'articestate', // Database name you created
});

// Test the connection
db.getConnection((err, connection) => {
  if (err) {
    console.error('Database connection failed:', err.message);
  } else {
    console.log('Connected to the MySQL database!');
    connection.release(); // Release the connection back to the pool
  }
});

export default db;

This connection code will allow your app to connect to the articestate database even if no tables are created in it. You can interact with the database or query it later once you have tables.

5:) Use the Database Connection in index.js
Now, in your index.js file (located in the api folder), you can import the db.js file and use the connection for future queries or operations:

import express from "express";
import db from "./db.js";

const app = express();

// Middleware to parse JSON
app.use(express.json());

// Test Route
app.get("/api/test", (req, res) => {
  res.send("Connected to the database!");
});

app.listen(3000, () => {
  console.log("Server is running on port 3000!");
});

6:) Run the Server: In your terminal, navigate to the root of your project and run:

$ npm run dev

This will start your server and you can test the database connection. The /api/test route will respond with a message, verifying that the connection is active.

7:) Secure Your Database Credentials in .env File
To avoid exposing sensitive data, you should store your database credentials in a .env file.

Create a .env file in the root directory of your project.

Add your database configuration to the .env file:

DB_HOST=localhost
DB_USER=articestate
DB_PASSWORD=12345
DB_NAME=articestate

Install dotenv to load the environment variables:

$ npm install dotenv

8:) Modify db.js to use the credentials from the .env file:

import mysql from 'mysql2';
import dotenv from 'dotenv';

dotenv.config(); // Load environment variables

const db = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
});

db.getConnection((err, connection) => {
  if (err) {
    console.error('Database connection failed:', err.message);
  } else {
    console.log('Connected to the MySQL database!');
    connection.release();
  }
});

export default db;


Now, your credentials are safely stored in the .env file, and the connection code is reading the credentials from it.

9:) Ignore .env in Git
Make sure to add .env to your .gitignore file to prevent it from being pushed to version control:

.env
Conclusion:
With this setup, you've connected to your MySQL database without creating any tables. Your connection is configured, and you can start working with the database once you create tables or perform other queries.

==========================================================================
I create a user model 
==========================================================================
1:) To create a user model for MySQL in your project, you can use Sequelize, a popular ORM (Object-Relational Mapping) library for Node.js. It simplifies database operations and allows you to define models similarly to how you define schemas in Mongoose.

Here’s how you can do it:

2:) Install Sequelize and MySQL2
Run the following command in your project root to install Sequelize and MySQL2:

$ npm install sequelize mysql2

3:)Set Up Sequelize
In your api folder, create a new file named sequelize.js to configure Sequelize and connect it to your MySQL database.

import { Sequelize } from "sequelize";
import dotenv from "dotenv";

// Load environment variables
dotenv.config();

// Initialize Sequelize
const sequelize = new Sequelize(process.env.DB_NAME, process.env.DB_USER, process.env.DB_PASSWORD, {
  host: process.env.DB_HOST,
  dialect: "mysql",
});

// Test the connection
(async () => {
  try {
    await sequelize.authenticate();
    console.log("Connected to the MySQL database!");
  } catch (error) {
    console.error("Unable to connect to the database:", error.message);
  }
})();

export default sequelize;


4:) Create the Models Folder
Inside your api folder, create a folder named models. Then, create a file named user.model.js for your user model. models/user.model.js

import { DataTypes } from "sequelize";
import sequelize from "../sequelize.js";

const User = sequelize.define("User", {
  username: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false,
  },
}, {
  timestamps: true, // Automatically adds createdAt and updatedAt columns
});

export default User;

5:) Sync the Model with the Database
To ensure the User table is created in the database, you need to sync the model.

Update index.js
In your index.js file, import the User model and sync it with the database.

import express from "express";
import "./db.js"; // Database connection
import User from "./models/user.model.js"; // User model

const app = express();
app.use(express.json());

// Sync the database
(async () => {
  try {
    await User.sync(); // This creates the 'User' table if it doesn't exist
    console.log("User model synced with the database!");
  } catch (error) {
    console.error("Failed to sync the User model:", error.message);
  }
})();

// Test Route
app.get("/api/db-test", (req, res) => {
  res.send("Connected to the database!");
});

// Start the server
app.listen(3000, () => {
  console.log("Server is running on port 3000!");
});

Key Features of This Setup:
Automatic Table Creation: User.sync() will create the User table based on your model if it doesn’t exist.
Schema Validation: Sequelize validates data types and constraints.
Timestamps: The timestamps: true option automatically adds createdAt and updatedAt fields.
Next Steps
Once the User model is set up and synced with your database, you can:

Add CRUD (Create, Read, Update, Delete) routes for user management.
Hash user passwords using libraries like bcrypt before saving them.
Implement authentication features like login and registration.


==========================================================================
I create a test api route
==========================================================================
1:) First i go to index.js which is in api folder in which i write some code:

app.get('/test', (req, res) => {
  res.json({
    message: "Hello World...",
  });
});

2:) go to chrome and search localhost:3000/test you will see this:
{"message":"Hello Wordl..."}

3:) But this is not the best practice for creating api route because we can not create all api like for SingIn, SignUp everything in index.js so this will be so long file if we do like this. so best practice to create a separate file for it and a separate file for this function: 

app.get('/test', (req, res) => {
  res.json({
    message: "Api route is working...",
  });
};
);

4:) Create another folder in api folder name is routes. in which create a user.route.js file

5:) in user.route.js write the code:

import express from 'express';
const router = express.Router();

router.get('/test', (req,res)=>{
  res.json({
    message: "Hello World..",
  });
});

6:) in index.js modify the code:

instead of this: 
app.get('/test', (req,res)=>{
  res.json({
    message: "Hello World..",
  });
});

write this:
app.use("/api/user", userRouter);

7:) also import this at the top in index.js:
import userRouter from "./routes/user.route.js";

8:) export it at the end in user.route.js
export default router;

9:) writing like this is not best practice in user.route.js: 

import express from "express";

const router = express.Router();
router.get("/test", (req, res) => {
  res.json({
    message: "Api route is working...",
  });
});

export default router;

we need to write it in a separate file for that we create another folder controllers in api:
(req, res) => {
  res.json({
    message: "Api route is working...",
  });
}

10:) Create controllers folder in api and create user.controller.js file in which write this code:
export const test = (req, res) => {
  res.json({
    message: "Api route is working...",
  });
};

11:) modify the user.route.js file:

import express from "express";
import { test } from "../controllers/user.controller.js";

const router = express.Router();
router.get("/test", test);

export default router;

==========================================================================
I create a sign up API route
==========================================================================
1:) Create auth.controller.js file in controllers folder and write this code:

import User from "../models/user.model.js"; // Import the User model
import bcrypt from "bcryptjs"; // Use bcryptjs instead of bcrypt

export const signup = async (req, res) => {
  const { username, email, password } = req.body;

  try {
    // 1. Validate the input
    if (!username || !email || !password) {
      return res.status(400).json({ message: "All fields are required" });
    }

    // 2. Check if the email already exists
    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      return res.status(400).json({ message: "Email is already in use" });
    }

    // 3. Hash the password
    const hashedPassword = await bcrypt.hash(password, 10);

    // 4. Create the user in the database
    const newUser = await User.create({
      username,
      email,
      password: hashedPassword,
    });

    // 5. Respond with the newly created user (excluding the password)
    res.status(201).json({
      message: "User created successfully!",
      user: {
        id: newUser.id,
        username: newUser.username,
        email: newUser.email,
      },
    });
  } catch (error) {
    console.error("Error during signup:", error.message);
    res.status(500).json({ message: "An error occurred during sign-up" });
  }
};


but you need to install one in the root folder:

$ npm install bcryptjs

2:) Create auth.route.js file in the routes folder and write the code:

import express from "express";
import { signup } from "../controllers/auth.controller.js"; // Import signup controller

const router = express.Router();

// POST /api/auth/signup
router.post("/signup", signup);

export default router;


3:) Create syncModels.js file in api folder and write the code:

import User from "./models/user.model.js";

const syncModels = async () => {
  try {
    await User.sync(); // Sync the 'User' table
    console.log("User model synced with the database!");
  } catch (error) {
    console.error("Failed to sync the User model:", error.message);
    throw error; // Throw error to prevent server start if sync fails
  }
};

export default syncModels;

4:) Update the index.js file

import express from "express";
import "./db.js"; // Database connection
import syncModels from "./syncModels.js"; // Import syncModels
import userRouter from "./routes/user.route.js"; // User route
import authRouter from "./routes/auth.route.js"; // Import the auth routes

const app = express();
app.use(express.json());

// Sync the models before starting the server
(async () => {
  try {
    await syncModels(); // Sync all models
    console.log("All models synced successfully!");
  } catch (error) {
    console.error(
      "Model synchronization failed. Server not started.",
      error.message
    );
    process.exit(1); // Exit the process on sync failure
  }
})();

// Test Route
app.get("/api/db-test", (req, res) => {
  res.send("Connected to the database!");
});

// Use User routes
app.use("/api/user", userRouter);

// Use Auth routes for signup
app.use("/api/auth", authRouter); // Register auth routes for signup

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}!`);
});

5:) Open insomnia and click on home button then click on Create and then create a request collection

Request collection: articestate

click on + icon to create a HTTP Request 

HTTP Request: sign up
 
6:) Testing the Sign-Up API

POST http://localhost:3000/api/auth/signup

Click on Body JSON

{
  "username": "johndoe",
  "email": "john@example.com",
  "password": "SecurePassword123"
}

7:) Now send the request and you will get the response like this:

{
  "message": "User created successfully!",
  "user": {
    "id": 1,
    "username": "johndoe",
    "email": "john@example.com"
  }
}
