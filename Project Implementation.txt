==========================================================================
Install React js and Tailwind CSS and create the first template
==========================================================================
1:) Create a react project using the command
$ npm create vite@latest project

2:) Go to project folder
$ cd project
$ npm i

3:) install tailwind css using vite make sure you are in project

$ npm install -D tailwindcss postcss autoprefixer
$ npx tailwindcss init -p

4:) Remove all content from tailwind.config.js and paste

/** @type {import('tailwindcss').Config} \*/
export default {
content: [
"./index.html",
"./src/**/\*.{js,ts,jsx,tsx}",
],
theme: {
extend: {},
},
plugins: [],
}

5:) Remove all content from index.css which is in src folder and paste

@tailwind base;
@tailwind components;
@tailwind utilities;

6:) Delete App.css from src, in public folder delete vite.svg, in assets which is in src delete react.svg

7:) Remove everything from App.jsx which is in src and write this code:

export default function App() {
return (
<div className="text-center text-xl text-blue-500">
Welcome to Tailwind CSS!
</div>
);
}

8:) Now run the project

$ npm run dev

==========================================================================
I create pages and routes
==========================================================================
1:) Create a folder in src (pages) in which create 

      * About.jsx
      * SignIn.jsx
      * SignUp.jsx
      * Profile.jsx
      * Home.jsx

      in each file add rfc 

2:) Install a packege which enable us to create these routes in our project make sure your are in project folder 

$ npm i react-router-dom

3:) Now go to App.jsx and import it like this

import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import SignIn from './pages/SignIn';
import SignUp from './pages/SignUp';
import About from './pages/About';
import Profile from './pages/Profile';
export default function App()
{
  return (
    <BrowserRouter>
      <Routes>
        <Route path='/' element={ <Home />}/>
        <Route path='/sign-in' element={ <SignIn />}/>
        <Route path='/sign-up' element={ <SignUp />}/>
        <Route path='/about' element={ <About />}/>
        <Route path='/profile' element={ <Profile />}/>
      </Routes>
    </BrowserRouter>
  )
}

4:) Now run the project

$ npm run dev

==========================================================================
I create Header component and design it.
==========================================================================
1:) Create another folder in src (components) in which create a file
    * Header.jsx

    add rfc 

2:) Add this header to all pages go to App.jsx and add 

</Header> 

and import at the top

import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import SignIn from './pages/SignIn';
import SignUp from './pages/SignUp';
import About from './pages/About';
import Profile from './pages/Profile';
import Header from './components/Header';

export default function App()
{
  return (
    <BrowserRouter>
      <Header /> 
      <Routes>
        <Route path='/' element={ <Home />}/>
        <Route path='/sign-in' element={ <SignIn />}/>
        <Route path='/sign-up' element={ <SignUp />}/>
        <Route path='/about' element={ <About />}/>
        <Route path='/profile' element={ <Profile />}/>
      </Routes>
    </BrowserRouter>
  )
}

3:) Now run the project to check it

$ npm run dev 

4:) Now design the header component and also install a packege for icons make sure you are in project folder

$ npm i react-icons

 go to Header.jsx and write this code: 

// for icons
import { FaSearch } from "react-icons/fa";
// link is going to bring us from one page to another page without refreshing the page
import { Link } from "react-router-dom";

export default function Header() {
  return (
    // Create Header component start
    <header className="bg-slate-200 shadow-md">
      <div className="flex justify-between items-center max-w-6xl mx-auto p-3">
        {/* logo of our project  start*/}
        <Link to="/">
          <h1 className="font-bold text-sm sm:text-xl flex flex-wrap">
            <span className="text-slate-500">Artic</span>
            <span className="text-slate-700">Estate</span>
          </h1>
        </Link>
        {/* logo of our project  end*/}

        {/* search bar of header component  start*/}
        <form className="bg-slate-100 p-3 rounded-lg flex items-center">
          <input
            type="text"
            name="search"
            id="search"
            placeholder="search.... "
            className="bg-transparent focus: outline-none w-24 sm:w-64"
          />
          <FaSearch className="text-slate-600" />
        </form>
        {/* search bar of header component  end*/}

        {/* Navbars start */}
        <ul className="flex gap-4 ">
          <Link to="">
            <li className="hidden sm:inline text-slate-700 hover:underline">
              Home
            </li>
          </Link>
          <Link to="/about">
            <li className="hidden sm:inline text-slate-700 hover:underline">
              About
            </li>
          </Link>
          <Link to="/sign-in">
            <li className="text-slate-700 hover:underline">Sign in</li>
          </Link>
        </ul>
        {/* Navbars end */}
      </div>
    </header>
    // Create Header component start
  );
}

5:) npm run dev

==========================================================================
I create and run the server 
==========================================================================
1:) First i create a separet folder (api) in my FYP folder then we need to initialize a packege.json file but we need to do it in FYP folder and then i run a command

$ npm init -y

by using that command we create a package.json file in FYP folder.

2:) then install express in FYP folder using the command 

$ npm i express

by using this command we create Package-lock.json file and also create node_modules folder in FYP.

3:) then go to api folder and create index.js file and write the content 

import express from "express";

const app = express();

app.listen(3000, () => {
  console.log("Server is running on port 3000!!!!!!!!!!");
});

4:) Also add some module after "main": "index.js", in packege.json file

  "main": "index.js",

  we add this line 
  "type": "module",

5:) We do some changes but for each time we need to restart the server which is time consuming so we can fixed it by using nodemon. we can install by using the command make sure to install it in FYP HOME(root)

$ npm i nodemon

6:) After install nodemon add some packege for it in packege.json file which is in FYP HOME
Romeve this line from packege.json file
"test": "echo \"Error: no test specified\" && exit 1"

7:) Add these two lines

  "scripts": {
    "dev": "nodemon api/index.js",
    "start": "node api/index.js"
  },

8:) Run the server by using the command in FYP HOME folder

$ npm run dev

==========================================================================
Creating mysql database and connect our project to database 
==========================================================================
1:) Set Up MySQL in XAMPP
* Start XAMPP:
  Open the XAMPP Control Panel.
  Start the Apache and MySQL modules.
* Access phpMyAdmin:
  Open your browser and go to http://localhost/phpmyadmin.
* Create a Database:
  In phpMyAdmin, create a database for your project (e.g., articestate).

2:) Now click on phpMyAdmin then click on User accounts then click on Add user account.

User name: articestate
Host name: localhost
Password: 12345
Re-type: 12345

* Global privileges  check all
* click on Go

3:) Install MySQL Driver for Node.js
Navigate to the FYP folder in your terminal.
Run the following command to install the mysql2 package

$ npm i mysql2

4:) Set Up Database Connection in api/db.js
In your api folder, create a file called db.js and add the following code to connect to the database. This code does not require creating tables:

import mysql from 'mysql2';

// Create a connection pool without needing a specific table
const db = mysql.createPool({
  host: 'localhost',       // XAMPP MySQL server
  user: 'articestate',     // Username you created
  password: '12345',       // Password you created
  database: 'articestate', // Database name you created
});

// Test the connection
db.getConnection((err, connection) => {
  if (err) {
    console.error('Database connection failed:', err.message);
  } else {
    console.log('Connected to the MySQL database!');
    connection.release(); // Release the connection back to the pool
  }
});

export default db;

This connection code will allow your app to connect to the articestate database even if no tables are created in it. You can interact with the database or query it later once you have tables.

5:) Use the Database Connection in index.js
Now, in your index.js file (located in the api folder), you can import the db.js file and use the connection for future queries or operations:

import express from "express";
import db from "./db.js";

const app = express();

// Middleware to parse JSON
app.use(express.json());

// Test Route
app.get("/api/test", (req, res) => {
  res.send("Connected to the database!");
});

app.listen(3000, () => {
  console.log("Server is running on port 3000!");
});

6:) Run the Server: In your terminal, navigate to the root of your project and run:

$ npm run dev

This will start your server and you can test the database connection. The /api/test route will respond with a message, verifying that the connection is active.

7:) Secure Your Database Credentials in .env File
To avoid exposing sensitive data, you should store your database credentials in a .env file.

Create a .env file in the root directory of your project.

Add your database configuration to the .env file:

DB_HOST=localhost
DB_USER=articestate
DB_PASSWORD=12345
DB_NAME=articestate

Install dotenv in FYP to load the environment variables:

$ npm install dotenv

8:) Modify db.js to use the credentials from the .env file:

import mysql from 'mysql2';
import dotenv from 'dotenv';

dotenv.config(); // Load environment variables

const db = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
});

db.getConnection((err, connection) => {
  if (err) {
    console.error('Database connection failed:', err.message);
  } else {
    console.log('Connected to the MySQL database!');
    connection.release();
  }
});

export default db;


Now, your credentials are safely stored in the .env file, and the connection code is reading the credentials from it.

9:) Ignore .env in Git for that create a file in FYP .gitignore and write this:

  node_modules/
  .env

Make sure to add .env to your .gitignore file to prevent it from being pushed to version control:

.env
Conclusion:
With this setup, you've connected to your MySQL database without creating any tables. Your connection is configured, and you can start working with the database once you create tables or perform other queries.

==========================================================================
I create a user model 
==========================================================================
1:) To create a user model for MySQL in your project, you can use Sequelize, a popular ORM (Object-Relational Mapping) library for Node.js. It simplifies database operations and allows you to define models similarly to how you define schemas in Mongoose.

Here’s how you can do it:

2:) Install Sequelize and MySQL2
Run the following command in your project root to install Sequelize and MySQL2:

$ npm install sequelize mysql2

3:)Set Up Sequelize
In your api folder, create a new file named sequelize.js to configure Sequelize and connect it to your MySQL database.

import { Sequelize } from "sequelize";
import dotenv from "dotenv";

// Load environment variables
dotenv.config();

// Initialize Sequelize
const sequelize = new Sequelize(process.env.DB_NAME, process.env.DB_USER, process.env.DB_PASSWORD, {
  host: process.env.DB_HOST,
  dialect: "mysql",
});

// Test the connection
(async () => {
  try {
    await sequelize.authenticate();
    console.log("Connected to the MySQL database!");
  } catch (error) {
    console.error("Unable to connect to the database:", error.message);
  }
})();

export default sequelize;


4:) Create the Models Folder
Inside your api folder, create a folder named models. Then, create a file named user.model.js for your user model. models/user.model.js

import { DataTypes } from "sequelize";
import sequelize from "../sequelize.js";

const User = sequelize.define("User", {
  username: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false,
  },
}, {
  timestamps: true, // Automatically adds createdAt and updatedAt columns
});

export default User;

5:) Sync the Model with the Database
To ensure the User table is created in the database, you need to sync the model.

Update index.js
In your index.js file, import the User model and sync it with the database.

import express from "express";
import "./db.js"; // Database connection
import User from "./models/user.model.js"; // User model

const app = express();
app.use(express.json());

// Sync the database
(async () => {
  try {
    await User.sync(); // This creates the 'User' table if it doesn't exist
    console.log("User model synced with the database!");
  } catch (error) {
    console.error("Failed to sync the User model:", error.message);
  }
})();

// Test Route
app.get("/api/db-test", (req, res) => {
  res.send("Connected to the database!");
});

// Start the server
app.listen(3000, () => {
  console.log("Server is running on port 3000!");
});

==========================================================================
I create a test api route
==========================================================================
1:) First i go to index.js which is in api folder in which i write some code at the end:

app.get('/test', (req, res) => {
  res.json({
    message: "Hello World...",
  });
});

2:) go to chrome and search localhost:3000/test you will see this:
{"message":"Hello Wordl..."}

3:) But this is not the best practice for creating api route because we can not create all api like for SingIn, SignUp everything in index.js so this will be so long file if we do like this. so best practice to create a separate file for it and a separate file for this function: 

app.get('/test', (req, res) => {
  res.json({
    message: "Api route is working...",
  });
};
);

4:) Create another folder in api folder name is routes. in which create a user.route.js file

5:) in user.route.js write the code:

import express from 'express';
const router = express.Router();

router.get('/test', (req,res)=>{
  res.json({
    message: "Hello World..",
  });
});

6:) in index.js modify the code:

instead of this: 
app.get('/test', (req,res)=>{
  res.json({
    message: "Hello World..",
  });
});

write this:
app.use("/api/user", userRouter);

7:) also import this at the top in index.js:
import userRouter from "./routes/user.route.js";

8:) export it at the end in user.route.js
export default router;

9:) writing like this is not best practice in user.route.js: 

import express from "express";

const router = express.Router();
router.get("/test", (req, res) => {
  res.json({
    message: "Api route is working...",
  });
});

export default router;

we need to write it in a separate file for that we create another folder controllers in api:
(req, res) => {
  res.json({
    message: "Api route is working...",
  });
}

10:) Create controllers folder in api and create user.controller.js file in which write this code:
export const test = (req, res) => {
  res.json({
    message: "Api route is working...",
  });
};

11:) modify the user.route.js file:

import express from "express";
import { test } from "../controllers/user.controller.js";

const router = express.Router();
router.get("/test", test);

export default router;

==========================================================================
I create a sign up API route
==========================================================================
1:) Create auth.controller.js file in controllers folder and write this code:

import User from "../models/user.model.js";
import bcryptjs from "bcryptjs";

export const signup = async (req, res, next) => {
  const { username, email, password } = req.body;
  const hashedPassword = bcryptjs.hashSync(password, 10);
  const newUser = new User({ username, email, password: hashedPassword });
  try {
    await newUser.save();
    res.status(201).json("User created successfully");
  } catch (error) {
  	res.status(500).json(error.message);
  }
};

but you need to install a bcryptjs packege in the root FYP folder:

$ npm install bcryptjs

2:) Create auth.route.js file in the routes folder and write the code:

import express from "express";
import { signup } from "../controllers/auth.controller.js";

const router = express.Router();

router.post("/signup", signup);

export default router;

3:) Update the index.js file:

import express from "express";
import "./db.js"; // Database connection
import User from "./models/user.model.js"; // User model
import userRouter from "./routes/user.route.js";
import authRouter from "./routes/auth.route.js";

// Initialize the app
const app = express();
app.use(express.json()); // Middleware for JSON parsing

// Sync the database
(async () => {
  try {
    await User.sync(); // This creates the 'User' table if it doesn't exist
    console.log("User model synced with the database!");
  } catch (error) {
    console.error("Failed to sync the User model:", error.message);
  }
})();

// Test Route
app.get("/api/db-test", (req, res) => {
  res.send("Connected to the database!");
});

// User API route
app.use("/api/user", userRouter);

// Auth route
app.use("/api/auth", authRouter);

// Start the server
app.listen(3000, () => {
  console.log("Server is running on port 3000!");
});


4:) Open insomnia and click on home button then click on Create and then create a request collection

Request collection: articestate

click on + icon to create a HTTP Request 

HTTP Request: sign up
 
6:) Testing the Sign-Up API

POST http://localhost:3000/api/auth/signup

Click on Body JSON

{
  "username": "johndoe",
  "email": "john@example.com",
  "password": "SecurePassword123"
}

7:) Now send the request and you will get the response like this:

{
  "message": "User created successfully!",
  "user": {
    "id": 1,
    "username": "johndoe",
    "email": "john@example.com"
  }
}

==========================================================================
Create a middleware and a function to handle possible errors
==========================================================================
1:) In the previous section i complete signup api route and now in this section i am creating a middleware and a function to hanlde the error as you see each time we have create a try catch statement and response our error. so its going to be repetitive in our project if we have too many api routes so that's why i am creating a middleware.

2:) In the index.js file at the end we are going to write code for middleware.

3:) Now write the code in index.js:

import express from "express";
import "./db.js"; // Database connection
import User from "./models/user.model.js"; // User model
import userRouter from "./routes/user.route.js";
import authRouter from "./routes/auth.route.js";

const app = express(); // Initialize app
app.use(express.json()); // Middleware to parse JSON

// Sync the database
(async () => {
  try {
    await User.sync(); // This creates the 'User' table if it doesn't exist
    console.log("User model synced with the database!");
  } catch (error) {
    console.error("Failed to sync the User model:", error.message);
  }
})();

// Test Route (Must come AFTER app initialization)
app.get("/api/db-test", (req, res) => {
  res.send("Connected to the database!");
});

// Test API route
app.use("/api/user", userRouter);
// Auth route
app.use("/api/auth", authRouter);

// Middleware for error handling
app.use((err, req, res, next) => {
  const statusCode = err.statusCode || 500;
  const message = err.message || "Internal Server Error";
  return res.status(statusCode).json({
    success: false,
    statusCode,
    message,
  });
});

// Start the server
app.listen(3000, () => {
  console.log("Server is running on port 3000!");
});


4:) How to use it

5:) Go to auth.controller.js file and write this code: 

import User from "../models/user.model.js";
import bcryptjs from "bcryptjs";
import { errorHandler } from "../utils/error.js";

export const signup = async (req, res, next) => {
  const { username, email, password } = req.body;
  const hashedPassword = bcryptjs.hashSync(password, 10);
  const newUser = new User({ username, email, password: hashedPassword });
  try {
    await newUser.save();
    res.status(201).json("User created successfully");
  } catch (error) {
    next(error);
  }
};


6:) There are also some situation that there is no error in the system but we want throw an error for example the password the person is putting not long so enough this is not error but we can create an error for that. So we need to create a function to handle these kind of errors. So for that i create another folder in api folder folder name is utils and in which i create a file called error.js and write the below code:

export const errorHandler = (statusCode, message) => {
  const error = new Error();
  error.statusCode = statusCode;
  error.message = message;
  return error;	
};

7:) So next is to use this function in auth.controller.js file i write this code in auth.controller.js:

import User from "../models/user.model.js";
import bcryptjs from "bcryptjs";
import { errorHandler } from "../utils/error.js";

export const signup = async (req, res, next) => {
  const { username, email, password } = req.body;
  const hashedPassword = bcryptjs.hashSync(password, 10);
  const newUser = new User({ username, email, password: hashedPassword });
  try {
    await newUser.save();
    res.status(201).json("User created successfully");
  } catch (error) {
    next(errorHandler(550, 'error from the function'));
  }
};

8:) For now i don't need it i will use it letter in my project in some situation.
I write my old code in my auth.controller.js code is:

import User from "../models/user.model.js";
import bcryptjs from "bcryptjs";
import { errorHandler } from "../utils/error.js";

export const signup = async (req, res, next) => {
  const { username, email, password } = req.body;
  const hashedPassword = bcryptjs.hashSync(password, 10);
  const newUser = new User({ username, email, password: hashedPassword });
  try {
    await newUser.save();
    res.status(201).json("User created successfully");
  } catch (error) {
    next(error);
  }
};

That't it for creating a middleware...
in my existing code when user enter same name and email it just show  this error: 

{
	"success": false,
	"statusCode": 500,
	"message": "Validation error"
}

but when user enter different name and same email it show again this error :

{
	"success": false,
	"statusCode": 500,
	"message": "Validation error"
}

but when user enter same name and different email it show again this error: 

{
	"success": false,
	"statusCode": 500,
	"message": "Validation error"
}

but what i want  when user enter same name and email it show email and name already exist and but when user enter different name and same email it show email alreay exist and when user enter same name and different email it show name already exist so how to do like this in my existing code no extra packege or librsry use

just update the auth.controller.js file and write this code:

import User from "../models/user.model.js";
import bcryptjs from "bcryptjs";

export const signup = async (req, res, next) => {
  const { username, email, password } = req.body;

  try {
    // Check if the username already exists
    const existingUsername = await User.findOne({ where: { username } });
    if (existingUsername) {
      return res.status(400).json({ success: false, message: "Username already exists" });
    }

    // Check if the email already exists
    const existingEmail = await User.findOne({ where: { email } });
    if (existingEmail) {
      return res.status(400).json({ success: false, message: "Email already exists" });
    }

    // Hash the password
    const hashedPassword = bcryptjs.hashSync(password, 10);

    // Create a new user
    const newUser = new User({ username, email, password: hashedPassword });
    await newUser.save();

    // Respond with success and include user ID, username, email
    res.status(201).json({
      success: true,
      message: "User created successfully",
      user: {
        id: newUser.id,  // Include the user's ID (assuming you're using an auto-increment primary key)
        username: newUser.username,
        email: newUser.email
      }
    });
    
  } catch (error) {
    // Catch any unexpected errors and send a generic error response
    next(error);
  }
};


=========================================================================
I create a sign up page Ul
==========================================================================
1:) For that i go to my project folder then i go to src and then i go to pages and in pages i open my SignUp.jsx file. In which i have already writen some code:

import React from "react";

export default function SignUp() {
  return <div>SignUp</div>;
}

2:) Now start creating sign up ui.

3:) Write this code in SignUp.jsx:

import { Link } from "react-router-dom";

export default function SignUp() {
  return (
    <div className="p-3 max-w-lg mx-auto">
      <h1 className="text-3xl text-center font-semibold my-7">Sign Up</h1>
      <form className="flex flex-col gap-4">
        <input
          type="text"
          name="username"
          id="username"
          placeholder="username"
          className="border p-3 rounded-lg"
        />
        <input
          type="email"
          name="email"
          id="email"
          placeholder="email"
          className="border p-3 rounded-lg"
        />
        <input
          type="password"
          name="password"
          id="password"
          placeholder="password"
          className="border p-3 rounded-lg"
        />
        <button className="bg-slate-700 text-white p-3 rounded-lg uppercase hover:opacity-95 disabled:opacity-80">
          Sign up
        </button>
      </form>
      <div className="flex gap-2 mt-5">
        <p>Have an account?</p>
        <Link to={"/sign-in"}>
          <span className="text-blue-700">Sign in</span>
        </Link>
      </div>
    </div>
  );
}


4:) Write this code in index.css for background color. this color will apply for all pages.
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  background-color: rgb(241, 245, 241);
}


==========================================================================
I complete sign up page functionality
==========================================================================
1:) I am writing this code in my SignUp.jsx file:

import { useState } from "react";
import { Link } from "react-router-dom";

export default function SignUp() {
  const [formData, setFormData] = useState({});
  const handleChange = (e) => {
    setFormData({
      ...FormData,
      [e.target.id]: e.target.value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const res = await fetch("/api/auth/signup", formData);
  };
  console.log(formData);
  return (
    <div className="p-3 max-w-lg mx-auto">
      <h1 className="text-3xl text-center font-semibold my-7">
        Create an Account
      </h1>
      <form onSubmit={handleSubmit} className="flex flex-col gap-4">
        <input
          type="text"
          name="username"
          id="username"
          placeholder="username"
          className="border p-3 rounded-lg"
          onChange={handleChange}
        />
        <input
          type="email"
          name="email"
          id="email"
          placeholder="email"
          className="border p-3 rounded-lg"
          onChange={handleChange}
        />
        <input
          type="password"
          name="password"
          id="password"
          placeholder="password"
          className="border p-3 rounded-lg"
          onChange={handleChange}
        />
        <button className="bg-slate-700 text-white p-3 rounded-lg uppercase hover:opacity-95 disabled:opacity-80">
          Sign up
        </button>
      </form>
      <div className="flex gap-2 mt-5">
        <p>Have an account?</p>
        <Link to={"/sign-in"}>
          <span className="text-blue-700">Sign in</span>
        </Link>
      </div>
    </div>
  );
}

2:) Now create a proxy so we can resquest to the correct address to submit the form for that go to vite.config.js file and write this code.

old code:
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react-swc'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})


new code:
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";

// https://vite.dev/config/
export default defineConfig({
  server: {
    proxy: {
      "/api": {
        target: "http://localhost:3000",
        secure: false,
      },
    },
  },
  plugins: [react()],
});

3:) go back to SignUp.js file and start writing code like this: 

import { useState } from "react";
import { Link } from "react-router-dom";

export default function SignUp() {
  const [formData, setFormData] = useState({});

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.id]: e.target.value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const res = await fetch("/api/auth/signup", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(formData),
    });
    const data = await res.json();
    console.log(data);
  };

  console.log(formData);
  return (
    <div className="p-3 max-w-lg mx-auto">
      <h1 className="text-3xl text-center font-semibold my-7">
        Create an Account
      </h1>
      <form onSubmit={handleSubmit} className="flex flex-col gap-4">
        <input
          type="text"
          name="username"
          id="username"
          placeholder="username"
          className="border p-3 rounded-lg"
          onChange={handleChange}
        />
        <input
          type="email"
          name="email"
          id="email"
          placeholder="email"
          className="border p-3 rounded-lg"
          onChange={handleChange}
        />
        <input
          type="password"
          name="password"
          id="password"
          placeholder="password"
          className="border p-3 rounded-lg"
          onChange={handleChange}
        />
        <button className="bg-slate-700 text-white p-3 rounded-lg uppercase hover:opacity-95 disabled:opacity-80">
          Sign up
        </button>
      </form>
      <div className="flex gap-2 mt-5">
        <p>Have an account?</p>
        <Link to={"/sign-in"}>
          <span className="text-blue-700">Sign in</span>
        </Link>
      </div>
    </div>
  );
}

if you enter data in form and then check console in chrome you will see that user created successfully and then also check database.

4:) So next is to handle errors and set the sign up button to loading when user submit form.

5:) Write this code in SignUp.js

import { useState } from "react";
import { Link, useNavigate } from "react-router-dom";

export default function SignUp() {
  // for submiting form data
  const [formData, setFormData] = useState({});
  // for erros
  const [error, setError] = useState(null);
  // for loading
  const [loading, setLoading] = useState(false);

  //To redirct to sign in page or show a messsage user created successfully when user create an account we want to redirect to signin page
  const navigate = useNavigate();

  // for submiting form data
  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.id]: e.target.value,
    });
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      setLoading(true);
      const res = await fetch("/api/auth/signup", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });
      const data = await res.json();
      if (data.success == false) {
        setError(data.message);
        setLoading(false);
        return;
      }
      setLoading(false);
      setError(null);
      //To redirct to sign in page or show a messsage user created successfully when user create an account we want to redirect to signin page
      navigate("/sign-in");
    } catch (error) {
      setLoading(false);
      setError(error.message);
    }
  };
  return (
    <div className="p-3 max-w-lg mx-auto">
      <h1 className="text-3xl text-center font-semibold my-7">
        Create an Account
      </h1>
      <form onSubmit={handleSubmit} className="flex flex-col gap-4">
        <input
          type="text"
          name="username"
          id="username"
          placeholder="username"
          className="border p-3 rounded-lg"
          onChange={handleChange}
        />
        <input
          type="email"
          name="email"
          id="email"
          placeholder="email"
          className="border p-3 rounded-lg"
          onChange={handleChange}
        />
        <input
          type="password"
          name="password"
          id="password"
          placeholder="password"
          className="border p-3 rounded-lg"
          onChange={handleChange}
        />
        <button
          disabled={loading}
          className="bg-slate-700 text-white p-3 rounded-lg uppercase hover:opacity-95 disabled:opacity-80"
        >
          {loading ? "Loading....." : "Sign Up"}
        </button>
      </form>
      <div className="flex gap-2 mt-5">
        <p>Have an account?</p>
        <Link to={"/sign-in"}>
          <span className="text-blue-700">Sign in</span>
        </Link>
      </div>
      {error && <p className="text-red-500 mt-5">{error}</p>}
    </div>
  );
}

6:) When user click on submit button it will show some laoding animation effect for that write this code in SignUp.js:

import { useState } from "react";
import { Link, useNavigate } from "react-router-dom";

export default function SignUp() {
  // for submitting form data
  const [formData, setFormData] = useState({});
  // for errors
  const [error, setError] = useState(null);
  // for loading
  const [loading, setLoading] = useState(false);

  // To redirect to sign in page or show a message after successful user creation
  const navigate = useNavigate();

  // for submitting form data
  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.id]: e.target.value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      setLoading(true);
      const res = await fetch("/api/auth/signup", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });
      const data = await res.json();
      if (data.success === false) {
        setError(data.message);
        setLoading(false);
        return;
      }
      setLoading(false);
      setError(null);
      navigate("/sign-in");
    } catch (error) {
      setLoading(false);
      setError(error.message);
    }
  };

  return (
    <div className="p-3 max-w-lg mx-auto">
      <h1 className="text-3xl text-center font-semibold my-7">
        Create an Account
      </h1>
      <form onSubmit={handleSubmit} className="flex flex-col gap-4">
        <input
          type="text"
          name="username"
          id="username"
          placeholder="Username"
          className="border p-3 rounded-lg"
          onChange={handleChange}
        />
        <input
          type="email"
          name="email"
          id="email"
          placeholder="Email"
          className="border p-3 rounded-lg"
          onChange={handleChange}
        />
        <input
          type="password"
          name="password"
          id="password"
          placeholder="Password"
          className="border p-3 rounded-lg"
          onChange={handleChange}
        />
        <button
          disabled={loading}
          className="bg-slate-700 text-white p-3 rounded-lg uppercase hover:opacity-95 disabled:opacity-80 flex items-center justify-center gap-2"
        >
          {loading ? (
            <svg
              className="animate-spin h-5 w-5 border-t-2 border-white rounded-full"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
            >
              <circle cx="12" cy="12" r="10" stroke="none" fill="none" />
            </svg>
          ) : (
            "Sign Up"
          )}
          {loading && <span>Loading...</span>}
        </button>
      </form>
      <div className="flex gap-2 mt-5">
        <p>Have an account?</p>
        <Link to={"/sign-in"}>
          <span className="text-blue-700">Sign in</span>
        </Link>
      </div>
      {error && <p className="text-red-500 mt-5">{error}</p>}
    </div>
  );
}

7:) Also one more thing To handle empty input fields and display appropriate error messages, you can add checks for each required field (username, email, password) before processing the user registration. If any of these fields are missing, you can return an error message stating that the field is required.

8:) For that update the auth.controller.js

import User from "../models/user.model.js";
import bcryptjs from "bcryptjs";

export const signup = async (req, res, next) => {
  const { username, email, password } = req.body;

  // Check if any field is missing
  if (!username || !email || !password) {
    return res.status(400).json({
      success: false,
      message: "All fields are required",
    });
  }

  try {
    // Check if the username already exists
    const existingUsername = await User.findOne({ where: { username } });
    if (existingUsername) {
      return res
        .status(400)
        .json({ success: false, message: "Username already exists" });
    }

    // Check if the email already exists
    const existingEmail = await User.findOne({ where: { email } });
    if (existingEmail) {
      return res
        .status(400)
        .json({ success: false, message: "Email already exists" });
    }

    // Hash the password
    const hashedPassword = bcryptjs.hashSync(password, 10);

    // Create a new user
    const newUser = new User({ username, email, password: hashedPassword });
    await newUser.save();

    // Respond with success and include user ID, username, email
    res.status(201).json({
      success: true,
      message: "User created successfully",
      user: {
        id: newUser.id, // Include the user's ID (assuming you're using an auto-increment primary key)
        username: newUser.username,
        email: newUser.email,
      },
    });
  } catch (error) {
    // Catch any unexpected errors and send a generic error response
    next(error);
  }
};


It seems that our current setup is initializing the Sequelize connection twice: once in db.js and once in sequelize.js. This leads to duplicate connection logs, which we want to avoid. Let's correct this by keeping only one Sequelize connection setup, and we'll modify our index.js accordingly.

Steps:
1: Remove the redundant Sequelize connection from db.js: You only need the sequelize.js file for the database connection.
2: Simplify index.js: Ensure the connection and synchronization are only happening in one place.


sequelize.js:

// sequelize.js
import { Sequelize } from "sequelize";
import dotenv from "dotenv";

// Load environment variables
dotenv.config();

// Initialize Sequelize
const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_HOST,
    dialect: "mysql",
    logging: false, // Disable all query logging from Sequelize
  }
);

// Test the connection and sync models
(async () => {
  try {
    // Authenticate the connection
    await sequelize.authenticate();
    console.log("Connected to the MySQL database!");

    // Sync all models (e.g., creating tables if not already created)
    await sequelize.sync();
    console.log("User model synced with the database!");

  } catch (error) {
    console.error("Unable to connect to the database:", error.message);
  }
})();

export default sequelize;


index.js:

// index.js
import express from "express";
import "./sequelize.js"; // This will handle the database connection and sync
import User from "./models/user.model.js"; // User model (already synced in sequelize.js)
import userRouter from "./routes/user.route.js";
import authRouter from "./routes/auth.route.js";

const app = express(); // Initialize app
app.use(express.json()); // Middleware to parse JSON

// Test Route (Must come AFTER app initialization)
app.get("/api/db-test", (req, res) => {
  res.send("Connected to the database!");
});

// Test API route
app.use("/api/user", userRouter);
// Auth route
app.use("/api/auth", authRouter);

// Middleware for error handling
app.use((err, req, res, next) => {
  const statusCode = err.statusCode || 500;
  const message = err.message || "Internal Server Error";
  return res.status(statusCode).json({
    success: false,
    statusCode,
    message,
  });
});

// Start the server and only log once
app.listen(3000, () => {
  console.log("Server is running on port 3000!");
});


Key Changes:
1: sequelize.js: This file is now the only one handling the database connection and syncing of models (sequelize.sync()).
2: db.js: Removed entirely, as it's redundant when we're using Sequelize.
3: index.js: Simplified. The database sync is no longer needed here; it's handled in sequelize.js. Only the routes and server initialization remain.

Expected Behavior:
1: The "Connected to the MySQL database!" and "User model synced with the database!" messages will only appear once, during the first connection attempt in sequelize.js.
2: The server log ("Server is running on port 3000!") will appear once when the Express app starts.


 Complete sign up page Ul and Complete sign up page functionality